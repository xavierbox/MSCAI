are<- function (base,height){}
area<- function (base,height){}
area<- function (base,height){}
area <- function(base,heiht)
{
return base*height
}
area <- function(base,heiht)
{
base*height
}
area(1,2)
area <- function(base,height)
{
base*height
}
area(1,2)
area(21,2)
area(1,22)
area(1,22)
area(1,22)
area(1,22)
getwd()
d<- data.frame(x=1:3, y = c(1,3,1))
df<- data.frame(x=1:3, y = c(1,3,1))
library(graphics)
#create empty plot
x_limits = range( df$x )
y_limits = range( df$y )
plot(1,type='n',xlim=x_limits,ylim=y_limits,xlab='X', ylab='Y')
points( x = df$x, y = df$y,  xlim= x_limits, ylim=y_limits,col="red", t = "p" , pch="o" )
df <- rbind( df, x=2,y=2)
plot(1,type='n',xlim=x_limits,ylim=y_limits,xlab='X', ylab='Y')
points( x = df$x, y = df$y,  xlim= x_limits, ylim=y_limits,col="red", t = "p" , pch="o" )
df<- data.frame(x=1:3, y = c(100,300,100))
library(graphics)
#create empty plot
x_limits = range( df$x )
y_limits = range( df$y )
plot(1,type='n',xlim=x_limits,ylim=y_limits,xlab='X', ylab='Y')
points( x = df$x, y = df$y,  xlim= x_limits, ylim=y_limits,col="red", t = "p" , pch="o" )
df <- rbind( df, x=2,y=2)
df <- rbind( df, x=2,y=200)
plot(1,type='n',xlim=x_limits,ylim=y_limits,xlab='X', ylab='Y')
points( x = df$x, y = df$y,  xlim= x_limits, ylim=y_limits,col="red", t = "p" , pch="o" )
df<- data.frame(x=1:3, y = c(100,300,100))
library(graphics)
#create empty plot
x_limits = range( df$x )
y_limits = range( df$y )
plot(1,type='n',xlim=x_limits,ylim=y_limits,xlab='X', ylab='Y')
points( x = df$x, y = df$y,  xlim= x_limits, ylim=y_limits,col="red", t = "p" , pch="o" )
df <- rbind( df, x=2,y=200)
plot(1,type='n',xlim=x_limits,ylim=y_limits,xlab='X', ylab='Y')
points( x = df$x, y = df$y,  xlim= x_limits, ylim=y_limits,col="red", t = "p" , pch="o" )
df<- data.frame(x=1:3, y = c(100,300,100))
library(graphics)
#create empty plot
x_limits = range( df$x )
y_limits = range( df$y )
plot(1,type='n',xlim=x_limits,ylim=y_limits,xlab='X', ylab='Y')
points( x = df$x, y = df$y,  xlim= x_limits, ylim=y_limits,col="red", t = "p" , pch="o" )
df <- rbind( df, x=2,y=200)
df
df<- data.frame(x=1:3, y = c(100,300,100))
library(graphics)
df
df <- rbind( df, x=2,y=200)
df
df <- rbind( df, c(2,200) )
df
df<- data.frame(x=1:3, y = c(100,300,100))
library(graphics)
#create empty plot
x_limits = range( df$x )
y_limits = range( df$y )
plot(1,type='n',xlim=x_limits,ylim=y_limits,xlab='X', ylab='Y')
points( x = df$x, y = df$y,  xlim= x_limits, ylim=y_limits,col="red", t = "p" , pch="o" )
df <- rbind( df, c(2,200) )
plot(1,type='n',xlim=x_limits,ylim=y_limits,xlab='X', ylab='Y')
points( x = df$x, y = df$y,  xlim= x_limits, ylim=y_limits,col="red", t = "p" , pch="o" )
df<-data.frame( x = 0:2,y=c(0,0.5,0))
df
df<-data.frame( x = 0:2,y=c(0,0.5,0))
apply(df,1,function(x){ return(sqrt(sum(x*x)));});
df<-data.frame( x = 0:2,y=c(0,0.5,0))
apply(df,1,function(x){ return(sqrt(sum(x*x)));});
df$y <- df$y*100
apply(df,1,function(x){ return(sqrt(sum(x*x)));});
df
df <- rbind( df, c(2,200) )
plot(1,type='n',xlim=x_limits,ylim=y_limits,xlab='X', ylab='Y')
points( x = df$x, y = df$y,  xlim= x_limits, ylim=y_limits,col="red", t = "p" , pch="o" )
df
df <- rbind( df, c(2,200) )
plot(1,type='n',xlim=x_limits,ylim=y_limits,xlab='X', ylab='Y')
points( x = df$x, y = df$y,  xlim= x_limits, ylim=y_limits,col="red", t = "p" , pch="o" )
df
df<-data.frame( x = 0:2,y=c(0,0.5,0))
apply(df,1,function(x){ return(sqrt(sum(x*x)));});
df
df<- data.frame(x=1:3, y = c(100,300,100))
df
df<- data.frame(x=1:3, y = c(1,3,1))
library(graphics)
#create empty plot
x_limits = range( df$x )
y_limits = range( df$y )
plot(1,type='n',xlim=x_limits,ylim=y_limits,xlab='X', ylab='Y')
points( x = df$x, y = df$y,  xlim= x_limits, ylim=y_limits,col="red", t = "p" , pch="o" )
df<-data.frame( x = 0:2,y=c(0,0.5,0))
df
df<-data.frame( x = 0:2,y=c(0,0.5,0))
apply(df,1,function(x){ return(sqrt(sum(x*x)));});
df$y <- df$y*100
df<-data.frame( x = 0:2,y=c(0,0.5,0))
df
apply(df,1,function(x){ return(sqrt(sum(x*x)));});
df
df$y <- df$y*100
apply(df,1,function(x){ return(sqrt(sum(x*x)));});
df
df<-data.frame( x = 0:2,y=c(0,0.5,0))
df
apply(df,1,function(x){ return(sqrt(sum(x*x)));});
df
df$y <- df$y*100
df
apply(df,1,function(x){ return(sqrt(sum(x*x)));});
df<-data.frame( x = 0:2,y=c(0,0.5,0))
apply(df,1,function(x)
{ return(sqrt(sum(x*x)));
});
df$y <- df$y*100
apply(df,1,function(x)
{ return(sqrt(sum(x*x)));
});
df<-data.frame( x = 0:2,y=c(0,0.5,0))
apply(df,1,function(x)
{ return(sqrt(sum(x*x)));
});
df$y <- df$y*100
apply(df,1,function(x)
{ return(sqrt(sum(x*x)));
});
df
df<-data.frame( x = 0:2,y=c(0,0.5,0))
df
apply(df,1,function(x)
{ return(sqrt(sum(x*x)));
});
df
df$y <- df$y*100
df
apply(df,1,function(x)
{ return(sqrt(sum(x*x)));
});
df
v1 = c(1,2,3)
v1
v1 = c(1,2,3)
v2 = c(1,2,3)
v1*v2
sum( v1*v2 )
m1 = rbind( c(1,2), c(4,5) )
print(m1)
m2 = cbind( c(1,0), c(0,2) )
print(m2)
v1%*%v2
m1 %*% m2
t(m1)
library( graphics )
x<- as.numeric( 1: 10 )
x
c(1:10)
x<- c(1:10)
fx <- 2*x + 3
fx
plot(x,fx)
plot(x,fx, type= "n")
plot(x,fx, type= "n", xlab="X", ylab="y")
plot(x,fx, type= "n", xlab="X", ylab="y",  c(0,10),ylim = c(0,100))
points(x,fx,col="red")
points(x,fx,col="red")
points(x,fx,col="red")
points(x,fx,col="red")
points(x,fx,col="red")
points(x,fx,col="red")
result <- 21 * 37  + 2
print(result)
print( sqrt(2) )
print( sqrt(4 - (9/2)) )
result<- 10^200 * 10^150
print( result )
if (is.infinite(result)){
print("It is infinite")
}else if(is.nan(result)){
print("It is nan")
}else{
print("It is not inf and not nan")
}
x <- c( 1,2, 3)
y <- c( 2,1,-3)
print(x)
print(y)
#one way
element_mult <- x * y
dot_product  <- sum (element_mult )
print( dot_product )
#another way: using the internal product %*%
dot_product <- x %*% y
print( dot_product )
#but neither of these used the transpose. They used x and y
#as vectors. If we assume that x,y a row vectors, then we
#need to proceed differently. Lets use matrices
tx <-  t(cbind( 1,2,3  ))
ty <-  t(cbind( 2,1,-3 ))
print(tx)
print(ty)
#element-wise
element_mult = t(x) * t(y)
dot_product  <- sum (element_mult )
print( dot_product )
print( element_mult)
#error, non- conformable arguments.
tx %*% ty
dim(tx)
dim(ty)
m1 = cbind( c(1,4), c(2,5))
m2 = rbind( c(1,0), c(0,2))
m1
m2
dim(m1)
dim(m2)
#matrix product
m1 %*% m2
m2 %*% m1
#sum
result <- m1 + m2
result
m1 %*% t(m2 )
m2 %*% t(m1 )
library( graphics )
x <- as.numeric( 1:10 )
fx <- as.numeric( x*x -2*x )
x
fx
length(x)
length(fx)
#scatter plot
plot(x = x ,y = fx )
#as line
plot(x = x ,y = fx, type = 'l')
#as line and marks
plot(x = x ,y = fx, col="red", type = 'b', xlab="axis x", ylab = "y axis", main="Chart title")
#plot two lines
fx2 <- x
cl <- c("red","blue")# rainbow(5)
#empty plot
plot(1, xlim = c(0,10),ylim = c(0,100), t = "n")
data = list(fx,fx2)
for( line in 1:length(data)){
points(y = unlist( data[line] ) ,x = x, col=cl[line], type = 'b', xlab="axis x", ylab = "y axis", main="Chart title")
}
#option 1
datafile = "disastersim01.csv"
path = file.path(getwd(), datafile)
data = read.csv( datafile )
View(data)
#option 1
datafile = "disastersim01.csv"
path = file.path(getwd(), datafile)
data = read.csv( datafile )
View(data)
getwd()
setwd("D:/Projects/Personal/TechLe/MsCAI/ArtificialIntelligence/Lab1")
getwd()
getwd()
getwd()
getwd()
setwd("D:/Projects/Personal/TechLe/MsCAI/ArtificialIntelligence/Lab1")
datafile = "disastersim01.csv"
path = file.path(getwd(), datafile)
data = read.csv( datafile )
View(data)
class( data )
#option 2
data2 = read.table( datafile, header = TRUE, sep = "," )
View(data2)
class( data2 )
colnames( data2 )
#lets plot something
colors<- c("red","blue")
plot( x = data2$landX, y = data2$landY,col=colors[1+data2$state], xlab="X", ylab="y", main="state" )
getwd()
