unlabelled_data<-data.frame(x=0:12,y=6)
predictions <-  knnClassify( labelled_data, 3 , unlabelled_data)
predictions
co=c("blue", "red")
colors = co[1+predictions]
points(unlabelled_data$x,unlabelled_data$y,t="p",cex=1.4,col=colors)#, bg=colors,pch=23)
##################################
# test case 3
##################################
set.seed( 4345 )
create_scatter_circle <-function(  ){
plot(1, t= "n", xlim=c(0,15), ylim=c(0,10), main="Example")
diam1 <- 3.0
circle_center <- c(3.0,3.0)
x1 <- circle_center[1] + runif(10,-1.0, 1.0 )* runif( 10,0.01, 1.0) *diam1
y1 <- circle_center[2] + runif(10,-1.0, 1.0 )* runif( 10,0.01, 1.0) *diam1
points(x1,y1,t="p",cex=1.2,col="red", bg="red", pch=23)
labelled_data1 <- cbind( x=x1,y=y1,1)
diam2 <- 3.0
circle_center <- c(12.0,5.0)
x2 <- circle_center[1] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
y2 <- circle_center[2] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
points(x2,y2,t="p",cex=1.2,col="blue", bg="blue", pch=23)
labelled_data2 <- cbind( x= x2,y = y2,0)
labelled_data<-rbind( labelled_data2,labelled_data1)
colnames( labelled_data)<-c("x","y","label")
diam2 <- 3.0
circle_center <- c(7.0,6.0)
x3 <- circle_center[1] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
y3 <- circle_center[2] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
#points(x3,y3,t="p",cex=1.2,col="black", bg="black", pch=21)
unlabelled_data <- cbind( x= x3,y = y3)
return ( list(as.data.frame(labelled_data), as.data.frame(unlabelled_data )   ) )
}
#scattred
data <- create_scatter_circle()
unlabelled_data <- data[[2]]
labelled_data   <- data[[1]]
predictions <-  knnClassify( labelled_data, 3 , unlabelled_data)
predictions
co=c("blue", "red")
colors = co[1+predictions]
points(unlabelled_data$x,unlabelled_data$y,t="p",cex=1.4,col=colors)#, bg=colors,pch=23)
#line
unlabelled_data<-data.frame(x=0:12,y=6)
predictions <-  knnClassify( labelled_data, 3 , unlabelled_data)
predictions
co=c("blue", "red")
colors = co[1+predictions]
points(unlabelled_data$x,unlabelled_data$y,t="p",cex=1.4,col=colors)#, bg=colors,pch=23)
legend(2.4,3, legend=c("Filled: training", "Empty: Test"), pch=25,cex=0.8 )
legend(2.4,3, legend=c("Filled: training", "Empty: Test") )
legend(2.4,6, legend=c("Filled: training", "Empty: Test") )
legend(2.4,8, legend=c("Filled: training", "Empty: Test") )
legend(2.,9, legend=c("Filled: training", "Empty: Test") )
legend(1.,9, legend=c("Filled: training", "Empty: Test") )
##################################
# test case 3
##################################
set.seed( 4345 )
create_scatter_circle <-function(  ){
plot(1, t= "n", xlim=c(0,15), ylim=c(0,10), main="Example")
diam1 <- 3.0
circle_center <- c(3.0,3.0)
x1 <- circle_center[1] + runif(10,-1.0, 1.0 )* runif( 10,0.01, 1.0) *diam1
y1 <- circle_center[2] + runif(10,-1.0, 1.0 )* runif( 10,0.01, 1.0) *diam1
points(x1,y1,t="p",cex=1.2,col="red", bg="red", pch=23)
labelled_data1 <- cbind( x=x1,y=y1,1)
diam2 <- 3.0
circle_center <- c(12.0,5.0)
x2 <- circle_center[1] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
y2 <- circle_center[2] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
points(x2,y2,t="p",cex=1.2,col="blue", bg="blue", pch=23)
labelled_data2 <- cbind( x= x2,y = y2,0)
labelled_data<-rbind( labelled_data2,labelled_data1)
colnames( labelled_data)<-c("x","y","label")
diam2 <- 3.0
circle_center <- c(7.0,6.0)
x3 <- circle_center[1] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
y3 <- circle_center[2] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
#points(x3,y3,t="p",cex=1.2,col="black", bg="black", pch=21)
unlabelled_data <- cbind( x= x3,y = y3)
return ( list(as.data.frame(labelled_data), as.data.frame(unlabelled_data )   ) )
}
#scattred
data <- create_scatter_circle()
unlabelled_data <- data[[2]]
labelled_data   <- data[[1]]
predictions <-  knnClassify( labelled_data, 3 , unlabelled_data)
predictions
co=c("blue", "red")
colors = co[1+predictions]
points(unlabelled_data$x,unlabelled_data$y,t="p",cex=1.4,col=colors)#, bg=colors,pch=23)
#line
unlabelled_data<-data.frame(x=0:12,y=6)
predictions <-  knnClassify( labelled_data, 3 , unlabelled_data)
predictions
co=c("blue", "red")
colors = co[1+predictions]
points(unlabelled_data$x,unlabelled_data$y,t="p",cex=1.4,col=colors)#, bg=colors,pch=23)
legend(1.,9, legend=c("Filled: training", "Empty: Test") )
source('D:/Projects/Personal/TechLe/MsCAI/ArtificialIntelligence/UsingR/KNearestNeighbours/NearestNeighboursTests.R')
##################################
# test case 3
##################################
set.seed( 4345 )
create_scatter_circle <-function(  ){
plot(1, t= "n", xlim=c(0,15), ylim=c(0,10), main="Example", xlab="x", ylab="y")
diam1 <- 3.0
circle_center <- c(3.0,3.0)
x1 <- circle_center[1] + runif(10,-1.0, 1.0 )* runif( 10,0.01, 1.0) *diam1
y1 <- circle_center[2] + runif(10,-1.0, 1.0 )* runif( 10,0.01, 1.0) *diam1
points(x1,y1,t="p",cex=1.2,col="red", bg="red", pch=23)
labelled_data1 <- cbind( x=x1,y=y1,1)
diam2 <- 3.0
circle_center <- c(12.0,5.0)
x2 <- circle_center[1] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
y2 <- circle_center[2] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
points(x2,y2,t="p",cex=1.2,col="blue", bg="blue", pch=23)
labelled_data2 <- cbind( x= x2,y = y2,0)
labelled_data<-rbind( labelled_data2,labelled_data1)
colnames( labelled_data)<-c("x","y","label")
diam2 <- 3.0
circle_center <- c(7.0,6.0)
x3 <- circle_center[1] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
y3 <- circle_center[2] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
#points(x3,y3,t="p",cex=1.2,col="black", bg="black", pch=21)
unlabelled_data <- cbind( x= x3,y = y3)
return ( list(as.data.frame(labelled_data), as.data.frame(unlabelled_data )   ) )
}
#scattred
data <- create_scatter_circle()
unlabelled_data <- data[[2]]
labelled_data   <- data[[1]]
predictions <-  knnClassify( labelled_data, 3 , unlabelled_data)
predictions
co=c("blue", "red")
colors = co[1+predictions]
points(unlabelled_data$x,unlabelled_data$y,t="p",cex=1.4,col=colors)#, bg=colors,pch=23)
#line
unlabelled_data<-data.frame(x=0:12,y=6)
predictions <-  knnClassify( labelled_data, 3 , unlabelled_data)
predictions
co=c("blue", "red")
colors = co[1+predictions]
points(unlabelled_data$x,unlabelled_data$y,t="p",cex=1.4,col=colors)#, bg=colors,pch=23)
legend(1.,9, legend=c("Filled: training", "Empty: Test") )
source('D:/Projects/Personal/TechLe/MsCAI/ArtificialIntelligence/UsingR/KNearestNeighbours/NearestNeighboursTests.R')
#labeledData is a dataframe or a matrix, the columns are the
#features + 1 label column, rows = observations
#     x11,x12....x1n, y1
#     x21,x22....x2n, y2
#     x31,x32....x3n, y3
#     x41,x42....x4n, y4
#
#unlabeled data is also a data.frame or matrix, but without the label column.
knnClassify <- function( labelledData, k, unlabelledData)
{
#defined as a co-function to keep it self-contained
#returns the mode. If it is a multi-mode input, the returned will still
#be a numeric but indexable -no dims-
vals_mode <- function(data) {
unique_values <- unique(data)
tab_values <- tabulate(match(data, unique_values))
unique_values[tab_values == max(tab_values)]
}
#again, as a co-function
#returns a dataframe. column1 = distance(euclidean) column2=label #nrows = 1
#labelled_df is as described before, point_df is a dataframe that correcponds
#to one row in the test set
get_keuclid_dist_labels<-function(labelledData, the_point_df, k = NA ){
#we do this to be able to accept either a matrix or a data.frame in line 40
point_df <- as.numeric( the_point_df )
#create a data.frame that will be returned
dist <- data.frame()
nfeatures <- ncol(labelledData) - 1
for( n in 1:nrow(labelledData)) dist<- rbind(  dist, (labelledData[n,1:nfeatures]- point_df[1]) )
dist<- sqrt(rowSums( dist*dist) )
#also add some more meaningful column names
dist <- data.frame( "distance"=dist,  "label" = labelledData[,nfeatures+1])
#now lets sort the data in ascending order according to distance
dist <- dist [ order( dist["distance"]), ]
#keep only the first k neighbours
if( !is.na(k)){
dist <- dist [ 1:k, ]
}
return( dist )
}
#initialize the matrix to return (its integer class ill be enforced later)
pred_labels<-matrix( ncol =1, nrow = 0)
#for each row
for( n in 1:nrow(unlabelledData )){
#get one datum either as a data frame or matrix
point_df <- unlabelledData[n, ]
#get a dtaframe of distances and labels of the k-closest neighbours
distances_df <- get_keuclid_dist_labels( labelledData, point_df,  k )
#distance     label
# 1.407160     4
# 4.035402     1
# 8.035402     2
#    (...etc...)
#with the stored distances we could weight their contributions(next version).
modes <- vals_mode(  distances_df$label )
#returns always the smallest of the modes (if multi-mode, ex: 1,1,1,2,3,3,3)
mode  <- modes[ which.min(modes) ]
print(modes)
pred_labels<- rbind( pred_labels, "label"=mode)
}
return (as.integer(pred_labels ))
}
"
"
source("NearestNeighbours.R")
##################################
# test case 1
##################################
#test data as dataframes
labelled_df <- data.frame()
labelled_df <- rbind ( c(1,1,1),c(2,2,2), c(3,3,3), c(4,4,4),c(5,5.,5),c(6.,6.2,6) )
labelled_df <- as.data.frame( labelled_df )
colnames(labelled_df)<-c("v1","v2","label")
labelled_df
unlabelledData <- rbind ( c(1.01,1.0) )
unlabelledData <- labelled_df[1:4,1:2]
unlabelledData
predictions <-  knnClassify( labelled_df, 3 , unlabelledData)
predictions
class( predictions)
##################################
# test case 2
##################################
#test data as matrices
labelled_df<- as.matrix( labelled_df )
labelled_df
unlabelledData<- as.matrix( unlabelledData )
unlabelledData
predictions <-  knnClassify( labelled_df, 3 , unlabelledData)
predictions
class( predictions)
##################################
# test case 3
##################################
set.seed( 4345 )
create_scatter_circle <-function(  ){
plot(1, t= "n", xlim=c(0,15), ylim=c(0,10), main="Example", xlab="x", ylab="y")
diam1 <- 3.0
circle_center <- c(3.0,3.0)
x1 <- circle_center[1] + runif(10,-1.0, 1.0 )* runif( 10,0.01, 1.0) *diam1
y1 <- circle_center[2] + runif(10,-1.0, 1.0 )* runif( 10,0.01, 1.0) *diam1
points(x1,y1,t="p",cex=1.2,col="red", bg="red", pch=23)
labelled_data1 <- cbind( x=x1,y=y1,1)
diam2 <- 3.0
circle_center <- c(12.0,5.0)
x2 <- circle_center[1] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
y2 <- circle_center[2] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
points(x2,y2,t="p",cex=1.2,col="blue", bg="blue", pch=23)
labelled_data2 <- cbind( x= x2,y = y2,0)
labelled_data<-rbind( labelled_data2,labelled_data1)
colnames( labelled_data)<-c("x","y","label")
diam2 <- 3.0
circle_center <- c(7.0,6.0)
x3 <- circle_center[1] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
y3 <- circle_center[2] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
#points(x3,y3,t="p",cex=1.2,col="black", bg="black", pch=21)
unlabelled_data <- cbind( x= x3,y = y3)
return ( list(as.data.frame(labelled_data), as.data.frame(unlabelled_data )   ) )
}
#scattred
data <- create_scatter_circle()
unlabelled_data <- data[[2]]
labelled_data   <- data[[1]]
predictions <-  knnClassify( labelled_data, 3 , unlabelled_data)
predictions
co=c("blue", "red")
colors = co[1+predictions]
points(unlabelled_data$x,unlabelled_data$y,t="p",cex=1.4,col=colors)#, bg=colors,pch=23)
#line
unlabelled_data<-data.frame(x=0:12,y=6)
predictions <-  knnClassify( labelled_data, 3 , unlabelled_data)
predictions
co=c("blue", "red")
colors = co[1+predictions]
points(unlabelled_data$x,unlabelled_data$y,t="p",cex=1.4,col=colors)#, bg=colors,pch=23)
legend(1.,9, legend=c("Filled: training", "Empty: Test") )
source('D:/Projects/Personal/TechLe/MsCAI/ArtificialIntelligence/UsingR/KNearestNeighbours/NearestNeighboursTests.R')
source('D:/Projects/Personal/TechLe/MsCAI/ArtificialIntelligence/UsingR/KNearestNeighbours/NearestNeighboursTests.R')
source('D:/Projects/Personal/TechLe/MsCAI/ArtificialIntelligence/UsingR/KNearestNeighbours/NearestNeighboursTests.R')
source('D:/Projects/Personal/TechLe/MsCAI/ArtificialIntelligence/UsingR/KNearestNeighbours/NearestNeighboursTests.R')
source('D:/Projects/Personal/TechLe/MsCAI/ArtificialIntelligence/UsingR/KNearestNeighbours/NearestNeighboursTests.R')
##################################
# test case 3
##################################
set.seed( 4345 )
create_scatter_circle <-function(  ){
plot(1, t= "n", xlim=c(0,15), ylim=c(0,10), main="Example", xlab="x", ylab="y")
diam1 <- 3.0
circle_center <- c(3.0,3.0)
x1 <- circle_center[1] + runif(10,-1.0, 1.0 )* runif( 10,0.01, 1.0) *diam1
y1 <- circle_center[2] + runif(10,-1.0, 1.0 )* runif( 10,0.01, 1.0) *diam1
points(x1,y1,t="p",cex=1.2,col="red", bg="red", pch=23)
labelled_data1 <- cbind( x=x1,y=y1,1)
diam2 <- 3.0
circle_center <- c(12.0,5.0)
x2 <- circle_center[1] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
y2 <- circle_center[2] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
points(x2,y2,t="p",cex=1.2,col="blue", bg="blue", pch=23)
labelled_data2 <- cbind( x= x2,y = y2,0)
labelled_data<-rbind( labelled_data2,labelled_data1)
colnames( labelled_data)<-c("x","y","label")
diam2 <- 3.0
circle_center <- c(7.0,6.0)
x3 <- circle_center[1] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
y3 <- circle_center[2] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
#points(x3,y3,t="p",cex=1.2,col="black", bg="black", pch=21)
unlabelled_data <- cbind( x= x3,y = y3)
return ( list(as.data.frame(labelled_data), as.data.frame(unlabelled_data )   ) )
}
#scattred
data <- create_scatter_circle()
unlabelled_data <- data[[2]]
labelled_data   <- data[[1]]
predictions <-  knnClassify( labelled_data, 3 , unlabelled_data)
predictions
co=c("blue", "red")
colors = co[1+predictions]
points(unlabelled_data$x,unlabelled_data$y,t="p",cex=1.4,col=colors)#, bg=colors,pch=23)
#line
unlabelled_data<-data.frame(x=0:12,y=6)
predictions <-  knnClassify( labelled_data, 3 , unlabelled_data)
predictions
co=c("blue", "red")
colors = co[1+predictions]
points(unlabelled_data$x,unlabelled_data$y,t="p",cex=1.4,col=colors)#, bg=colors,pch=23)
legend(1.,9, legend=c("Filled: training", "Empty: Test") )
##################################
# test case 3
##################################
set.seed( 4345 )
create_scatter_circle <-function(  ){
plot(1, t= "n", xlim=c(0,15), ylim=c(0,10), main="Example", xlab="x", ylab="y")
diam1 <- 3.0
circle_center <- c(3.0,3.0)
x1 <- circle_center[1] + runif(10,-1.0, 1.0 )* runif( 10,0.01, 1.0) *diam1
y1 <- circle_center[2] + runif(10,-1.0, 1.0 )* runif( 10,0.01, 1.0) *diam1
points(x1,y1,t="p",cex=1.2,col="red", bg="red", pch=23)
labelled_data1 <- cbind( x=x1,y=y1,1)
diam2 <- 3.0
circle_center <- c(12.0,5.0)
x2 <- circle_center[1] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
y2 <- circle_center[2] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
points(x2,y2,t="p",cex=1.2,col="blue", bg="blue", pch=23)
labelled_data2 <- cbind( x= x2,y = y2,0)
labelled_data<-rbind( labelled_data2,labelled_data1)
colnames( labelled_data)<-c("x","y","label")
diam2 <- 3.0
circle_center <- c(7.0,6.0)
x3 <- circle_center[1] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
y3 <- circle_center[2] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
#points(x3,y3,t="p",cex=1.2,col="black", bg="black", pch=21)
unlabelled_data <- cbind( x= x3,y = y3)
return ( list(as.data.frame(labelled_data), as.data.frame(unlabelled_data )   ) )
}
#scattred
data <- create_scatter_circle()
unlabelled_data <- data[[2]]
labelled_data   <- data[[1]]
predictions <-  knnClassify( labelled_data, 3 , unlabelled_data)
predictions
co=c("blue", "red")
colors = co[1+predictions]
points(unlabelled_data$x,unlabelled_data$y,t="p",cex=1.4,col=colors)#, bg=colors,pch=23)
#line
unlabelled_data<-data.frame(x=0:12,y=6)
predictions <-  knnClassify( labelled_data, 3 , unlabelled_data)
predictions
co=c("blue", "red")
colors = co[1+predictions]
points(unlabelled_data$x,unlabelled_data$y,t="p",cex=1.4,col=colors)#, bg=colors,pch=23)
legend(1.,9, legend=c("Filled: training", "Empty: Test") )
}
#labeledData is a dataframe or a matrix, the columns are the
#features + 1 label column, rows = observations
#     x11,x12....x1n, y1
#     x21,x22....x2n, y2
#     x31,x32....x3n, y3
#     x41,x42....x4n, y4
#
#unlabeled data is also a data.frame or matrix, but without the label column.
knnClassify <- function( labelledData, k, unlabelledData)
{
#defined as a co-function to keep it self-contained
#returns the mode. If it is a multi-mode input, the returned will still
#be a numeric but indexable -no dims-
vals_mode <- function(data) {
unique_values <- unique(data)
tab_values <- tabulate(match(data, unique_values))
unique_values[tab_values == max(tab_values)]
}
#again, as a co-function
#returns a dataframe. column1 = distance(euclidean) column2=label #nrows = 1
#labelled_df is as described before, point_df is a dataframe that correcponds
#to one row in the test set
get_keuclid_dist_labels<-function(labelledData, the_point_df, k = NA ){
#we do this to be able to accept either a matrix or a data.frame in line 40
point_df <- as.numeric( the_point_df )
#create a data.frame that will be returned
dist <- data.frame()
nfeatures <- ncol(labelledData) - 1
for( n in 1:nrow(labelledData)) dist<- rbind(  dist, (labelledData[n,1:nfeatures]- point_df[1]) )
dist<- sqrt(rowSums( dist*dist) )
#also add some more meaningful column names
dist <- data.frame( "distance"=dist,  "label" = labelledData[,nfeatures+1])
#now lets sort the data in ascending order according to distance
dist <- dist [ order( dist["distance"]), ]
#keep only the first k neighbours
dist <- dist [ 1:k, ]
return( dist )
}
#initialize the matrix to return (its integer class ill be enforced later)
pred_labels<-matrix( ncol =1, nrow = 0)
#for each row
for( n in 1:nrow(unlabelledData )){
#get one datum either as a data frame or matrix
point_df <- unlabelledData[n, ]
#get a dtaframe of distances and labels of the k-closest neighbours
distances_df <- get_keuclid_dist_labels( labelledData, point_df,  k )
#distance     label
# 1.407160     4
# 4.035402     1
# 8.035402     2
#    (...etc...)
#with the stored distances we could weight their contributions(next version).
modes <- vals_mode(  distances_df$label )
#returns always the smallest of the modes (if multi-mode, ex: 1,1,1,2,3,3,3)
mode  <- modes[ which.min(modes) ]
print(modes)
pred_labels<- rbind( pred_labels, "label"=mode)
}
return (as.integer(pred_labels ))
}
##################################
# test case 1
##################################
#test data as dataframes
labelled_df <- data.frame()
labelled_df <- rbind ( c(1,1,1),c(2,2,2), c(3,3,3), c(4,4,4),c(5,5.,5),c(6.,6.2,6) )
labelled_df <- as.data.frame( labelled_df )
colnames(labelled_df)<-c("v1","v2","label")
labelled_df
unlabelledData <- rbind ( c(1.01,1.0) )
unlabelledData <- labelled_df[1:4,1:2]
unlabelledData
predictions <-  knnClassify( labelled_df, 3 , unlabelledData)
predictions
class( predictions)
##################################
# test case 2
##################################
#test data as matrices
labelled_df<- as.matrix( labelled_df )
labelled_df
unlabelledData<- as.matrix( unlabelledData )
unlabelledData
predictions <-  knnClassify( labelled_df, 3 , unlabelledData)
predictions
class( predictions)
##################################
# test case 3
##################################
set.seed( 4345 )
create_scatter_circle <-function(  ){
plot(1, t= "n", xlim=c(0,15), ylim=c(0,10), main="Example", xlab="x", ylab="y")
diam1 <- 3.0
circle_center <- c(3.0,3.0)
x1 <- circle_center[1] + runif(10,-1.0, 1.0 )* runif( 10,0.01, 1.0) *diam1
y1 <- circle_center[2] + runif(10,-1.0, 1.0 )* runif( 10,0.01, 1.0) *diam1
points(x1,y1,t="p",cex=1.2,col="red", bg="red", pch=23)
labelled_data1 <- cbind( x=x1,y=y1,1)
diam2 <- 3.0
circle_center <- c(12.0,5.0)
x2 <- circle_center[1] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
y2 <- circle_center[2] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
points(x2,y2,t="p",cex=1.2,col="blue", bg="blue", pch=23)
labelled_data2 <- cbind( x= x2,y = y2,0)
labelled_data<-rbind( labelled_data2,labelled_data1)
colnames( labelled_data)<-c("x","y","label")
diam2 <- 3.0
circle_center <- c(7.0,6.0)
x3 <- circle_center[1] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
y3 <- circle_center[2] + runif(10,-1.0, 1.0 )* runif( 1,0.1, 1.0) * diam2
#points(x3,y3,t="p",cex=1.2,col="black", bg="black", pch=21)
unlabelled_data <- cbind( x= x3,y = y3)
return ( list(as.data.frame(labelled_data), as.data.frame(unlabelled_data )   ) )
}
#scattred
data <- create_scatter_circle()
unlabelled_data <- data[[2]]
labelled_data   <- data[[1]]
predictions <-  knnClassify( labelled_data, 3 , unlabelled_data)
predictions
co=c("blue", "red")
colors = co[1+predictions]
points(unlabelled_data$x,unlabelled_data$y,t="p",cex=1.4,col=colors)#, bg=colors,pch=23)
#line
unlabelled_data<-data.frame(x=0:12,y=6)
predictions <-  knnClassify( labelled_data, 3 , unlabelled_data)
predictions
co=c("blue", "red")
colors = co[1+predictions]
points(unlabelled_data$x,unlabelled_data$y,t="p",cex=1.4,col=colors)#, bg=colors,pch=23)
legend(1.,9, legend=c("Filled: training", "Empty: Test") )
legend(1.,9, legend=c("Filled: Training", "Empty: Test") )
